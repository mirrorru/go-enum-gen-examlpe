// Code generated by go-enum DO NOT EDIT.

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	ClientStatusNew ClientStatus = iota
	ClientStatusActive
	ClientStatusInactive
	ClientStatusBlocked
)

var ErrInvalidClientStatus = fmt.Errorf("not a valid ClientStatus, try [%s]", strings.Join(_ClientStatusNames, ", "))

const _ClientStatusName = "newactiveinactiveblocked"

var _ClientStatusNames = []string{
	_ClientStatusName[0:3],
	_ClientStatusName[3:9],
	_ClientStatusName[9:17],
	_ClientStatusName[17:24],
}

// ClientStatusNames returns a list of possible string values of ClientStatus.
func ClientStatusNames() []string {
	tmp := make([]string, len(_ClientStatusNames))
	copy(tmp, _ClientStatusNames)
	return tmp
}

// ClientStatusValues returns a list of the values for ClientStatus
func ClientStatusValues() []ClientStatus {
	return []ClientStatus{
		ClientStatusNew,
		ClientStatusActive,
		ClientStatusInactive,
		ClientStatusBlocked,
	}
}

var _ClientStatusMap = map[ClientStatus]string{
	ClientStatusNew:      _ClientStatusName[0:3],
	ClientStatusActive:   _ClientStatusName[3:9],
	ClientStatusInactive: _ClientStatusName[9:17],
	ClientStatusBlocked:  _ClientStatusName[17:24],
}

// String implements the Stringer interface.
func (x ClientStatus) String() string {
	if str, ok := _ClientStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ClientStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ClientStatus) IsValid() bool {
	_, ok := _ClientStatusMap[x]
	return ok
}

var _ClientStatusValue = map[string]ClientStatus{
	_ClientStatusName[0:3]:   ClientStatusNew,
	_ClientStatusName[3:9]:   ClientStatusActive,
	_ClientStatusName[9:17]:  ClientStatusInactive,
	_ClientStatusName[17:24]: ClientStatusBlocked,
}

// ParseClientStatus attempts to convert a string to a ClientStatus.
func ParseClientStatus(name string) (ClientStatus, error) {
	if x, ok := _ClientStatusValue[name]; ok {
		return x, nil
	}
	return ClientStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidClientStatus)
}

// MarshalText implements the text marshaller method.
func (x ClientStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ClientStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseClientStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *ClientStatus) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

var errClientStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *ClientStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ClientStatus(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = ClientStatus(v)
	case string:
		*x, err = ParseClientStatus(v)
	case []byte:
		*x, err = ParseClientStatus(string(v))
	case ClientStatus:
		*x = v
	case int:
		*x = ClientStatus(v)
	case *ClientStatus:
		if v == nil {
			return errClientStatusNilPtr
		}
		*x = *v
	case uint:
		*x = ClientStatus(v)
	case uint64:
		*x = ClientStatus(v)
	case *int:
		if v == nil {
			return errClientStatusNilPtr
		}
		*x = ClientStatus(*v)
	case *int64:
		if v == nil {
			return errClientStatusNilPtr
		}
		*x = ClientStatus(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = ClientStatus(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errClientStatusNilPtr
		}
		*x = ClientStatus(*v)
	case *uint:
		if v == nil {
			return errClientStatusNilPtr
		}
		*x = ClientStatus(*v)
	case *uint64:
		if v == nil {
			return errClientStatusNilPtr
		}
		*x = ClientStatus(*v)
	case *string:
		if v == nil {
			return errClientStatusNilPtr
		}
		*x, err = ParseClientStatus(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x ClientStatus) Value() (driver.Value, error) {
	return x.String(), nil
}
